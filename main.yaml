AWSTemplateFormatVersion: '2010-09-09'
Description: AWS IAM Users Tagging
Parameters:
  S3BucketName:
    Description: S3 Bucket name where PDF files & Variable file will be stored
    AllowedPattern: '[a-z0-9\-]+'
    Type: String
Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    DependsOn: IamUserTagLambdaInvokePermission
    Properties:
      BucketName: !Ref S3BucketName
      NotificationConfiguration:
        LambdaConfigurations:
          -
            Function: !GetAtt IamUserTagLambda.Arn
            Event: "s3:ObjectCreated:*"
            Filter:
              S3Key:
                Rules:
                  -
                    Name: suffix
                    Value: xlsx
  IamUserTagLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt
        - IamUserTagLambda
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Join
        - ''
        - - 'arn:aws:s3:::'
          - !Ref S3BucketName
  IamUserTagLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import os
          import sys
          import shutil
          from datetime import datetime
          from urllib.parse import unquote_plus
          from pip._internal import main as pipmain
          
          import boto3
          
          
          # Install Excel file handling module
          vendor = '/tmp/vendor'
          
          if os.path.exists(vendor):
              shutil.rmtree(vendor)
          os.makedirs(vendor)
          
          pipmain(['install', '--upgrade', '--no-cache-dir', 'xlrd', '-t', vendor, '--force-reinstall'])
          here = os.path.dirname(os.path.realpath(__file__))
          sys.path.insert(0, os.path.join(here, vendor))
          
          import xlrd
          
          iam = boto3.client('iam')
          s3 = boto3.resource('s3')
          
          def lambda_handler(event, context):
              logs = []
              logs.append('Tagging started...')
              print('Event: %s' %event)
          
              record = event['Records'][0]
              key    = unquote_plus(record['s3']['object']['key'])
              bucket = record['s3']['bucket']['name']
              print('Bucket: %s' %bucket)
              print('Key: %s' %key)
          
              excel_file = '/tmp/' + key
              s3.meta.client.download_file(bucket, key, excel_file)
          
              wb = xlrd.open_workbook(excel_file)
              sheet = wb.sheet_by_index(0)
              for i in range(sheet.nrows):
                  x = sheet.row_values(i)
                  print(x)
                  username = x[0].strip()
                  email = x[1].strip()

                  try:
                      tag_eligible = True
                      tags = iam.list_user_tags(UserName=username)['Tags']
                      for tag in tags:
                          if tag['Key'] == 'Email' and tag['Value'] == email:
                              tag_eligible = False
                              logs.append('Skipping User %s' %username)
                              break
                      if not tag_eligible:
                          continue
                      iam.tag_user(UserName=username, Tags=[{'Key': 'Email', 'Value': email}])
                      logs.append('User %s successfully tagged' %username)
                  except iam.exceptions.NoSuchEntityException:
                      logs.append('User %s does not exist' %username)
          
              logs.append('Tagging finished!!!')
              
              print('Uploading log file to S3...')
              log_file_path = '/tmp/logname'
              with open(log_file_path, 'w') as f:
                  for log in logs:
                      f.write("%s\n" % log)
              s3.meta.client.upload_file(log_file_path, bucket, datetime.now().strftime("%d-%m-%Y_%I-%M-%S_%p") + '.txt')
              print('log file successfully uploaded to S3!!!')
              
              return 0
      Role:
        'Fn::GetAtt':
          - IamUserTagLambdaExecRole
          - Arn
      Runtime: python3.7
      Timeout: 120
      MemorySize: 256
  IamUserTagLambdaExecRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/IAMFullAccess
